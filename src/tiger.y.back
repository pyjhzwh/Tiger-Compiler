%{
#include <stdio.h>
#include "errormsg.h"
#include "util.h"

int yylex(void);

/* parse error */
void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}

%}

%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token
COMMA COLON SEMICOLON LPAREN
RPAREN LBRACK RBRACK LBRACE RBRACE DOT PLUS
MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
AND OR ASSIGN ARRAY IF THEN ELSE WHILE FOR
TO DO LET IN END OF BREAK NIL FUNCTION
VAR TYPE

%nonassoc LOW
%nonassoc LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS /*precedence for unary minus */

%start program

%%

program:  exp

exp     : lValue
        | NIL
        | INT
        | STRING
        | seqExp
        | negation
        | callExp
        | infixExp
        | arrCreate
        | recCreate
        | assignment
        | ifThenElse
        | ifThen
        | whileExp
        | forExp
        | BREAK
        | letExp


seqExp  : LPAREN expSeq RPAREN
        | LPAREN RPAREN


expSeq  : exp
        | exp SEMICOLON expSeq


negation: MINUS exp %prec UMINUS


callExp : ID LPAREN RPAREN
        | ID LPAREN expList RPAREN


expList : exp
        | exp COMMA expList

infixExp: exp PLUS exp
        | exp MINUS exp
        | exp TIMES exp
        | exp DIVIDE exp
        | exp EQ exp
        | exp NEQ exp
        | exp LT exp
        | exp LE exp
        | exp GT exp
        | exp GE exp
        | exp AND exp
        | exp OR exp


arrCreate : ID LBRACK exp RBRACK OF exp

recCreate : ID LBRACE RBRACE
          | ID LBRACE fieldCreates RBRACE


fieldCreates:fieldCreate
            | fieldCreate COMMA fieldCreates


fieldCreate : ID EQ exp


assignment  : lValue ASSIGN exp


ifThenElse  : IF exp THEN exp ELSE exp


ifThen      : IF exp THEN exp


whileExp    : WHILE exp DO exp


forExp      : FOR ID ASSIGN exp TO exp DO exp


letExp      : LET decs IN expSeq END


decs        : dec
            | dec decs


dec         : tyDec
            | varDec
            | funDec


tyDec       : TYPE ID EQ ty


ty          : ID
            | arrTy
            | recTy


arrTy       : ARRAY OF ID

recTy       : LBRACE fieldDecs RBRACE
            | LBRACE RBRACE


fieldDecs   : fieldDec
            | fieldDec COMMA fieldDecs


fieldDec    : ID COLON ID

funDec      : FUNCTION ID LPAREN fieldDecs RPAREN EQ exp
            | FUNCTION ID LPAREN RPAREN EQ exp
            | FUNCTION ID LPAREN fieldDecs RPAREN COLON ID EQ exp
            | FUNCTION ID LPAREN RPAREN COLON ID EQ exp

varDec      : VAR ID ASSIGN exp
            | VAR ID COLON ID ASSIGN exp
lValue      : ID
            | subscript
            | fieldExp

subscript   : lValue LBRACK exp RBRACK

fieldExp    : lValue DOT ID
